Given a string containing only digits, restore it by returning all possible valid IP address combinations.

A valid IP address must be in the form of A.B.C.D, where A,B,C and D are numbers from 0-255. The numbers cannot be 0 prefixed unless they are 0.

Example:

Given “25525511135”,

return [“255.255.11.135”, “255.255.111.35”]. (Make sure the returned strings are sorted in order)


--------------------------------------------
public class Solution {
    public ArrayList<String> restoreIpAddresses(String A) {
        ArrayList<String> result = new ArrayList<>();
        int[]path = new int[4];
        backtrack(result, A, 0,path,0);
        return result;
    }
    
    public void backtrack(ArrayList<String> result, String A, int index, int[]path, int segments){
        if(segments==4 && index==A.length()){
            result.add(path[0]+"."+path[1]+"."+path[2]+"."+path[3]);
            return;
        }
        else if(segments==4 || index==A.length()){
            return;
        }
        
        for(int len=1; len<=3 && index+len<=A.length(); len++){
            String temp = A.substring(index,index+len);
            int value = Integer.parseInt(temp);
            if(value>255 || len>=2 && A.charAt(index)=='0'){
                break;
            }
            path[segments] = value;
            backtrack(result,A,index+len,path,segments+1);
            path[segments]=-1;
        }
    }
}
